name: Upload Firrtl Release Artifacts

on:
  release:
    types: [created]
  workflow_dispatch:
  push:
    branches:
      - add-windows-release-artifact

jobs:
  publish-sources:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    steps:
      # Clone the CIRCT repo and its submodules. Do shallow clone to save clone
      # time.
      - name: Get CIRCT and LLVM
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          submodules: "true"

      # Package up sources for distribution, as the default source bundles from GitHub don't include LLVM.
      - name: Create Source Archive
        run: |
          touch circt-full-sources.tar.gz
          tar \
            --exclude-vcs \
            --exclude=circt-full-sources.tar.gz \
            -czf \
            circt-full-sources.tar.gz .
      - name: Upload Source Archive
        uses: AButler/upload-release-assets@v2.0
        with:
          files: circt-full-sources.tar.gz
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  publish:
    strategy:
      matrix:
        build_config:
          - mode: release
            assert: OFF
            shared: OFF
            stats: ON
        runner: [windows-2019] #, ubuntu-20.04, macos-11]
        include:
          - runner: ubuntu-20.04
            os: linux
            arch: x64
            tar: tar
            cont: "\\"
            setup: ""
            # Default clang (11) is broken, see LLVM issue 59622.
            cmake-args: '-DCMAKE_C_COMPILER=clang-12 -DCMAKE_CXX_COMPILER=clang++-12'
          - runner: macos-11
            os: macos
            arch: x64
            tar: gtar
            cont: "\\"
            setup: ""
            cmake-args: ''
          - runner: windows-2019
            os: windows
            arch: x64
            tar: tar
            cont: "`"
            setup: ./utils/find-vs.ps1
            cmake-args: ''
            archive: firrtl-bin-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
    runs-on: ${{ matrix.runner }}
    steps:
      # Clone the CIRCT repo and its submodules. Do shallow clone to save clone
      # time.
      - name: Get CIRCT
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          submodules: "true"

            ## We need unshallow CIRCT for later "git describe"
            #- name: Unshallow CIRCT (but not LLVM)
            #  run: |
            #    git fetch --unshallow --no-recurse-submodules

            #- name: Setup Linux
            #  if: matrix.os == 'linux'
            #  run: sudo apt-get install ninja-build

            #- name: Setup Ninja and GNU Tar Mac
            #  if: matrix.os == 'macos'
            #  run: brew install ninja gnu-tar

            #- name: Build LLVM
            #  run: |
            #    ${{ matrix.setup }}
            #    mkdir -p llvm/build
            #    cd llvm/build
            #    cmake -G Ninja ../llvm ${{ matrix.cont }}
            #        ${{ matrix.cmake-args }} ${{ matrix.cont }}
            #        -DCMAKE_BUILD_TYPE=${{ matrix.build_config.mode }} ${{ matrix.cont }}
            #        -DBUILD_SHARED_LIBS=${{ matrix.build_config.shared }} ${{ matrix.cont }}
            #        -DLLVM_BUILD_TOOLS=OFF ${{ matrix.cont }}
            #        -DLLVM_BUILD_EXAMPLES=OFF ${{ matrix.cont }}
            #        -DLLVM_ENABLE_ASSERTIONS=${{ matrix.build_config.assert }} ${{ matrix.cont }}
            #        -DLLVM_ENABLE_BINDINGS=OFF ${{ matrix.cont }}
            #        -DLLVM_ENABLE_OCAMLDOC=OFF ${{ matrix.cont }}
            #        -DLLVM_ENABLE_PROJECTS='mlir' ${{ matrix.cont }}
            #        -DLLVM_OPTIMIZED_TABLEGEN=ON ${{ matrix.cont }}
            #        -DLLVM_STATIC_LINK_CXX_STDLIB=ON ${{ matrix.cont }}
            #        -DLLVM_ENABLE_TERMINFO=OFF ${{ matrix.cont }}
            #        -DLLVM_PARALLEL_LINK_JOBS=1 ${{ matrix.cont }}
            #        -DLLVM_TARGETS_TO_BUILD="host" ${{ matrix.cont }}
            #        -DLLVM_FORCE_ENABLE_STATS=${{ matrix.build_config.stats }} ${{ matrix.cont }}
            #        -DLLVM_ENABLE_ZSTD=OFF
            #    ninja

            ## --------
            ## Build and test CIRCT
            ## --------

            #- name: Build and Test CIRCT
            #  run: |
            #    ${{ matrix.setup }}
            #    mkdir build
            #    cd build
            #    cmake -G Ninja .. ${{ matrix.cont }}
            #      ${{ matrix.cmake-args }} ${{ matrix.cont }}
            #      -DBUILD_SHARED_LIBS=${{ matrix.build_config.shared }} ${{ matrix.cont }}
            #      -DCMAKE_BUILD_TYPE=${{ matrix.build_config.mode }} ${{ matrix.cont }}
            #      -DLLVM_ENABLE_ASSERTIONS=${{ matrix.build_config.assert }} ${{ matrix.cont }}
            #      -DMLIR_DIR="$(pwd)/../llvm/build/lib/cmake/mlir" ${{ matrix.cont }}
            #      -DLLVM_DIR="$(pwd)/../llvm/build/lib/cmake/llvm" ${{ matrix.cont }}
            #      -DVERILATOR_DISABLE=ON ${{ matrix.cont }}
            #      -DLLVM_ENABLE_TERMINFO=OFF ${{ matrix.cont }}
            #      -DLLVM_STATIC_LINK_CXX_STDLIB=ON ${{ matrix.cont }}
            #      -DLLVM_PARALLEL_LINK_JOBS=1 ${{ matrix.cont }}
            #      -DLLVM_FORCE_ENABLE_STATS=${{ matrix.build_config.stats }} ${{ matrix.cont }}
            #      -DCIRCT_RELEASE_TAG_ENABLED=ON ${{ matrix.cont }}
            #      -DCIRCT_RELEASE_TAG=firtool ${{ matrix.cont }}
            #      -DCMAKE_EXPORT_COMPILE_COMMANDS=OFF ${{ matrix.cont }}
            #      -DCMAKE_INSTALL_PREFIX="$(pwd)/../install"
            #    ninja
            #    ninja check-circt check-circt-unit
            #    ninja install-firtool
            #    cd ..

            #- name: Display Files
            #  run: |
            #    file install/*
            #    file install/bin/*

      # Specify bash for the Windows runner to work
      - name: Name Install Directory
        id: name_dir
        shell: bash
        run: |
          BASE=$(git describe --tag)
          SANITIZED=$(echo -n $BASE | tr '/' '-')
          echo "value=$SANITIZED" >> "$GITHUB_OUTPUT"

      # Specify bash for the Windows runner to work
      - name: Package Binaries
        shell: bash
        run: |
          # TODO fake delete me
          mv utils intall
          echo ${{ matrix.archive }}
          mv install ${{ steps.name_dir.outputs.value }}
          ${{ matrix.tar }} czf firrtl-bin-${{ matrix.os }}-${{ matrix.arch }}.tar.gz ${{ steps.name_dir.outputs.value }}

      # Specify bash for the Windows runner to work
      - name: Show Tarball
        shell: bash
        run: |
          ls -l firrtl-bin-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          #sha256sum firrtl-bin-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
      - name: Upload Binaries (Non-Tag)
        uses: actions/upload-artifact@v3
        if: github.ref_type != 'tag'
        with:
          name: firrtl-bin-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          path: firrtl-bin-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          retention-days: 7
      - name: Upload Binaries (Tag)
        uses: AButler/upload-release-assets@v2.0
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: firrtl-bin-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          repo-token: ${{ secrets.GITHUB_TOKEN }}
